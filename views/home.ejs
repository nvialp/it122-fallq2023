<!DOCTYPE html>

<html>

<head>
    <title>Mars Rovers App with React</title>
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
    
    <body>
        <h1>
            Mars Rovers (React)
        </h1>

        <div id="root"></div>

        <script type="text/babel">

            const Rovers = (props) => {
                const listRovers = rovers.map((rover) => <li onClick={props.onClick} key={rover.name}>{rover.name}</li>);
                
                return <ul>{listRovers}</ul>
            }
            
            const RoverDetail = (props) => {
                return (
                    <div>
                        <h3>Rover Details</h3>
                        
                        <form>
                            <b>Name:</b> <input type="text" name="name" value={props.rover.name || ""} onChange={props.handleChange} /> <br />
                            <b>Landed:</b> <input type="text" landed="landed" value={props.rover.landed || ""} onChange={props.handleChange} /> <br />
                            <b>Speed:</b> <input type="text" speed="speed" value={props.rover.speed || ""} onChange={props.handleChange}/> <br />
                            <b>Mass:</b> <input type="text" mass="mass" value={props.rover.mass || ""} onChange={props.handleChange}/> <br />
                            <b>Tools:</b> <input type="text" tools="tools" value={props.rover.tools || ""} onChange={props.handleChange}/> <br />
                        </form>

                        <button name="save" onClick={props.saveRover}>Save</button>&nbsp;
                        <button name="clear" onClick={props.clearForm}>Clear</button>&nbsp;
                        <button name="delete" onClick={props.deleteRover}>Delete</button>&nbsp;
                    </div>
                )                
            }
            
            const Home = (props) => {
                const [rovers, setRovers] = React.useState(props.data);
                const [currentRover, setCurrentRover] = React.useState({});

                React.useEffect(() => {
                    const fetchData = async () => {
                        fetch("/api/add/:name").then(res => res.json())
                            .then((json) => {
                                setRovers(json);
                            })
                    }    
                    fetchData()
                }, []);

                const selectRover = (event) => {
                    const found = rovers.find((rover) => {
                        return rover.name === event.target.innerText;
                    });
                    setCurrentRover(found);
                }

                const clearForm = () => {
                    setCurrentRover({});
                }

                const saveRover = () => {
                    if(!currentRover.name) {
                        return;
                    }
                    fetch("/api/add/", {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(currentRover)
                    })
                    .then(res => res.json())
                    .then((data) => {
                        if(!currentRover.name) {
                            currentRover.name = data.name;
                            setCurrentRover(currentRover);
                            let newRovers = [...rovers];
                            newRovers.push(currentRover);
                            setRovers(newRovers);
                        }
                    })
                }

                const deleteRover = () => {
                    let name = currentRover.name;
                    fetch(`/api/delete/${name}`)
                    .then(res => res.json())
                    .then((data) => {
                        const newRovers = rovers.filter((rover) => {
                            return rover.name !== name;
                        });
                        setRovers(newRovers);
                        setCurrentRover({})
                    });
                }

                const handleChange = (event) => {
                    let newRover = { ...currentRover };
                    newRover[event.target.name] = event.target.value;
                    setCurrentRover(newRover);

                    rovers.find((rover, index) => {
                        if(rover.name == newRover.name) {
                           rovers[index] = newRover;
                            setRovers(rovers);
                        }
                    })
                }
                
                return (
                    <div>
                        <Rovers rovers={rovers} onClick={selectRover}/>
                        <RoverDetail 
                            rover={currentRover}
                            handleChange={handleChange}
                            clearForm={clearForm}
                            saveRover={saveRover}
                            deleteRover={deleteRover}/>
                    </div>
                    );
            }
                
            const rovers = <%- rovers %>;
            ReactDOM.render(<Home data={rovers} />, document.getElementById('root'));
            
        </script>
    </body>
</html>